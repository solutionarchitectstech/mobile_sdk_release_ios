// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAAdvertisingSDK
import Alamofire
import Foundation
@_exported import SAAdvertisingSDK
import SATrackingSDK
import Swift
import UIKit
import WebKit
import _Concurrency
public typealias Click = SATrackingSDK.Click
public typealias AddToCart = SATrackingSDK.AddToCart
public typealias Purchase = SATrackingSDK.Purchase
public typealias StartView = SATrackingSDK.StartView
public typealias StopView = SATrackingSDK.StopView
public typealias Viewing = SATrackingSDK.Viewing
public typealias Search = SATrackingSDK.Search
public typealias AdImp = SATrackingSDK.AdImp
public typealias AdClick = SATrackingSDK.AdClick
public typealias Scroll = SATrackingSDK.Scroll
public struct BannerModel {
  public let refresh: Swift.Int
  public let timeout: Swift.Int
  public let placementId: Swift.String
  public let closeButtonType: SAAdvertisingSDK.CloseButtonType
  public let sizes: [SAAdvertisingSDK.Size]
  public init(refresh: Swift.Int, timeout: Swift.Int, placementId: Swift.String, closeButtonType: SAAdvertisingSDK.CloseButtonType, sizes: [SAAdvertisingSDK.Size])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SAAdvertisingBannerView) @_Concurrency.MainActor(unsafe) public class BannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var delegate: SAAdvertisingSDK.BannerViewDelegate?
  @_Concurrency.MainActor(unsafe) public func loadData(bannerModel: SAAdvertisingSDK.BannerModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension SAAdvertisingSDK.BannerView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension SAAdvertisingSDK.BannerView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public protocol BannerViewDelegate {
  func onLoadDataSuccess(placementId: Swift.String)
  func onLoadDataFail(placementId: Swift.String, reason: Swift.String)
  func onLoadWebContentSuccess(placementId: Swift.String)
  func onLoadWebContentFail(placementId: Swift.String, reason: Swift.String)
  func onCloseClick(placementId: Swift.String)
}
extension SAAdvertisingSDK.BannerViewDelegate {
  public func onLoadDataSuccess(placementId: Swift.String)
  public func onLoadDataFail(placementId: Swift.String, reason: Swift.String)
  public func onLoadWebContentSuccess(placementId: Swift.String)
  public func onLoadWebContentFail(placementId: Swift.String, reason: Swift.String)
  public func onCloseClick(placementId: Swift.String)
}
public enum CloseButtonType {
  case COUNTDOWN
  case APPEARING
  case VISIBLE
  case NONE
  public static func == (a: SAAdvertisingSDK.CloseButtonType, b: SAAdvertisingSDK.CloseButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HashType {
  public static let SHA_1: SAAdvertisingSDK.HashType
  public static let MD5: SAAdvertisingSDK.HashType
}
public enum RequestType {
  case GET
  case POST
  public static func == (a: SAAdvertisingSDK.RequestType, b: SAAdvertisingSDK.RequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Size : Swift.CustomDebugStringConvertible {
  public let width: Swift.Int, height: Swift.Int
  public init(width: Swift.Int, height: Swift.Int)
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class TechAdvertising {
  public static let tracker: SATrackingSDK.TechTracker
  public static func initialize(storeUrl: Swift.String, apiKey: Swift.String, apiSecret: Swift.String, partnerId: Swift.String, uid: Swift.String, baseUrl: Swift.String, trackingSdkBaseUrl: Swift.String, tagId: Swift.String? = nil, debugMode: Swift.Bool = false)
  @objc deinit
}
extension SAAdvertisingSDK.CloseButtonType : Swift.Equatable {}
extension SAAdvertisingSDK.CloseButtonType : Swift.Hashable {}
extension SAAdvertisingSDK.RequestType : Swift.Equatable {}
extension SAAdvertisingSDK.RequestType : Swift.Hashable {}
