// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAAdvertisingSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVKit
import Alamofire
import CommonCrypto
import CryptoKit
import Foundation
@_exported import SAAdvertisingSDK
import SATrackingSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct VastAdCategory : Swift.Codable {
  public let authority: Foundation.URL?
  public var category: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastAdCategory : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastAdCategory, b: SAAdvertisingSDK.VastAdCategory) -> Swift.Bool
}
public struct VastClientOptions {
  public let wrapperLimit: Swift.Int
  public let singleWrapperTimeLimit: Foundation.TimeInterval
  public let timeLimit: Foundation.TimeInterval
  public let cachedVMAPModel: SAAdvertisingSDK.VMAPModel?
  public init(wrapperLimit: Swift.Int = 5, singleWrapperTimeLimit: Foundation.TimeInterval = 5, timeLimit: Foundation.TimeInterval = 10, cachedVMAPModel: SAAdvertisingSDK.VMAPModel? = nil)
}
public class VastClient {
  public static var trackingLogOutput: ((Swift.String, [Foundation.URL]) -> ())?
  public init(options: SAAdvertisingSDK.VastClientOptions = VastClientOptions())
  public func parseVast(withContentsOf data: Swift.String, completion: @escaping (SAAdvertisingSDK.VastModel?, Swift.Error?) -> ())
  public func parseVast(withContentsOf url: Foundation.URL, completion: @escaping (SAAdvertisingSDK.VastModel?, Swift.Error?) -> ())
  public func parseVMAP(withContentsOf url: Foundation.URL) throws -> SAAdvertisingSDK.VMAPModel
  public func parseVast(withContentsOf url: Foundation.URL, testBundle: Foundation.Bundle, completion: @escaping (SAAdvertisingSDK.VastModel?, Swift.Error?) -> ())
  @objc deinit
}
public typealias Click = SATrackingSDK.Click
public typealias AddToCart = SATrackingSDK.AddToCart
public typealias Purchase = SATrackingSDK.Purchase
public typealias StartView = SATrackingSDK.StartView
public typealias StopView = SATrackingSDK.StopView
public typealias Viewing = SATrackingSDK.Viewing
public typealias Search = SATrackingSDK.Search
public typealias AdImp = SATrackingSDK.AdImp
public typealias AdClick = SATrackingSDK.AdClick
public typealias Scroll = SATrackingSDK.Scroll
public struct VastMediaFiles : Swift.Codable {
  public var mediaFiles: [SAAdvertisingSDK.VastMediaFile]
  public var interactiveCreativeFiles: [SAAdvertisingSDK.VastInteractiveCreativeFile]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastMediaFiles : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastMediaFiles, b: SAAdvertisingSDK.VastMediaFiles) -> Swift.Bool
}
@objc public protocol BannerViewDelegate {
  @objc optional func onLoadDataSuccess(placementId: Swift.String)
  @objc optional func onLoadDataFail(placementId: Swift.String, reason: Swift.String)
  @objc optional func onLoadWebContentSuccess(placementId: Swift.String)
  @objc optional func onLoadWebContentFail(placementId: Swift.String, reason: Swift.String)
  @available(*, deprecated, renamed: "onClose")
  @objc optional func onCloseClick(placementId: Swift.String)
  @objc optional func onClose(placementId: Swift.String)
}
extension Swift.String {
  public var toSeconds: Swift.Double? {
    get
  }
}
public struct Size : Swift.CustomDebugStringConvertible {
  public let width: Swift.Int, height: Swift.Int
  public init(width: Swift.Int, height: Swift.Int)
  public var debugDescription: Swift.String {
    get
  }
}
public struct VastImpression : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastImpression {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastImpression : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastImpression, b: SAAdvertisingSDK.VastImpression) -> Swift.Bool
}
public struct VastModel : Swift.Codable {
  public let version: Swift.String
  public var ads: [SAAdvertisingSDK.VastAd]
  public var errors: [Foundation.URL]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastModel {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastModel : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastModel, b: SAAdvertisingSDK.VastModel) -> Swift.Bool
}
public struct VastWrapper : Swift.Codable {
  public let followAdditionalWrappers: Swift.Bool?
  public let allowMultipleAds: Swift.Bool?
  public let fallbackOnNoAd: Swift.Bool?
  public var adTagUri: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastWrapper : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastWrapper, b: SAAdvertisingSDK.VastWrapper) -> Swift.Bool
}
public struct VastMediaFile : Swift.Codable {
  public let delivery: Swift.String
  public let type: Swift.String
  public let width: Swift.String
  public let height: Swift.String
  public let codec: Swift.String?
  public let id: Swift.String?
  public let bitrate: Swift.Int?
  public let minBitrate: Swift.Int?
  public let maxBitrate: Swift.Int?
  public let scalable: Swift.Bool?
  public let maintainAspectRatio: Swift.Bool?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastMediaFile {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastMediaFile : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastMediaFile, b: SAAdvertisingSDK.VastMediaFile) -> Swift.Bool
}
public struct BannerModel {
  public let refresh: Swift.Int
  public let timeout: Swift.Int
  public let placementId: Swift.String
  public let closeButtonType: SAAdvertisingSDK.CloseButtonType
  public let sizes: [SAAdvertisingSDK.Size]
  public let customParams: [Swift.String : Swift.String]
  public init(refresh: Swift.Int, timeout: Swift.Int, placementId: Swift.String, closeButtonType: SAAdvertisingSDK.CloseButtonType, sizes: [SAAdvertisingSDK.Size], customParams: [Swift.String : Swift.String] = [:])
}
public enum ContextConstant : Swift.Int, Swift.Encodable {
  case VIDEO
  case GAME
  case MUSIC
  case APPLICATION
  case TEXT
  case OTHER
  case UNKNOWN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VastExtension : Swift.Codable {
  public let type: Swift.String
  public var creativeParameters: [SAAdvertisingSDK.VastCreativeParameter]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastExtension {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastExtension : Swift.Equatable {
  public static func == (lhs: SAAdvertisingSDK.VastExtension, rhs: SAAdvertisingSDK.VastExtension) -> Swift.Bool
}
public struct VastInteractiveCreativeFile : Swift.Codable {
  public let type: Swift.String?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastInteractiveCreativeFile : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastInteractiveCreativeFile, b: SAAdvertisingSDK.VastInteractiveCreativeFile) -> Swift.Bool
}
@objc public protocol PlayerViewDelegate {
  @objc optional func onLoadDataSuccess(placementId: Swift.String)
  @objc optional func onLoadDataFail(error: Swift.Error)
  @objc optional func onLoadContentSuccess()
  @objc optional func onLoadContentFail(error: Swift.Error)
  @objc optional func onClose()
}
public struct VastResource : Swift.Codable {
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastResource : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastResource, b: SAAdvertisingSDK.VastResource) -> Swift.Bool
}
public enum VastError : Swift.Error {
  case invalidXMLDocument
  case invalidVASTDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case wrapperLimitReached
  case singleRequestTimeLimitReached
  case wrapperTimeLimitReached
  case internalError
  public static func == (a: SAAdvertisingSDK.VastError, b: SAAdvertisingSDK.VastError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastCreativeParameter : Swift.Codable {
  public var creativeId: Swift.String
  public var name: Swift.String
  public var type: Swift.String
  public var content: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastCreativeParameter {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastCreativeParameter : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastCreativeParameter, b: SAAdvertisingSDK.VastCreativeParameter) -> Swift.Bool
}
public enum TrackingError : Swift.Error {
  case MissingAdBreak
  case unableToUpdateProgressTrackingComplete
  case unableToUpdateProgress(msg: Swift.String)
  case unableToProvideCreativeClickThroughUrls
  case internalError(msg: Swift.String)
  case unableToSkipAdAtThisTime
  case noAdFound(withId: Swift.String)
}
public struct VMAPModel : Swift.Codable {
  public let version: Swift.String
  public var adBreaks: [SAAdvertisingSDK.VMAPAdBreak]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VMAPModel {
  public init(attrDict: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AudioPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAAdvertisingSDK.PlayerViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func loadData(endpoint: Swift.String = "", audioModel: SAAdvertisingSDK.AudioModel)
}
public struct RTBAdvertisingResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum AdType : Swift.String, Swift.Codable {
  case inline
  case wrapper
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastAd : Swift.Codable {
  public var type: SAAdvertisingSDK.AdType
  public let id: Swift.String
  public let sequence: Swift.Int?
  public let conditionalAd: Swift.Bool?
  public var adSystem: SAAdvertisingSDK.VastAdSystem?
  public var impressions: [SAAdvertisingSDK.VastImpression]
  public var adVerifications: [SAAdvertisingSDK.VastVerification]
  public var viewableImpression: SAAdvertisingSDK.VastViewableImpression?
  public var pricing: SAAdvertisingSDK.VastPricing?
  public var errors: [Foundation.URL]
  public var creatives: [SAAdvertisingSDK.VastCreative]
  public var extensions: [SAAdvertisingSDK.VastExtension]
  public var adTitle: Swift.String?
  public var adCategories: [SAAdvertisingSDK.VastAdCategory]
  public var description: Swift.String?
  public var advertiser: Swift.String?
  public var surveys: [SAAdvertisingSDK.VastSurvey]
  public var wrapper: SAAdvertisingSDK.VastWrapper?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastAd {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastAd : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastAd, b: SAAdvertisingSDK.VastAd) -> Swift.Bool
}
public struct RTBAdvertisingPostRequest : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct App : Swift.Encodable {
  public init(id: Swift.String, name: Swift.String, domain: Swift.String, cat: [Swift.Int], publisher: SAAdvertisingSDK.Publisher, content: SAAdvertisingSDK.Content, bundle: Swift.String, storeurl: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Content : Swift.Encodable {
  public init(context: SAAdvertisingSDK.ContextConstant, language: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Publisher : Swift.Encodable {
  public init(id: Swift.String, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Pmp : Swift.Encodable {
  public init(privateAuction: Swift.Int = 0, deals: [SAAdvertisingSDK.Deal])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Deal : Swift.Encodable {
  public init(id: Swift.String, bidfloor: Swift.Double, bidfloorcur: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RegsEXT : Swift.Encodable {
  public init(gdpr: Swift.Int, coppa: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Schain : Swift.Encodable {
  public init(ver: Swift.String, complete: Swift.Int, nodes: [SAAdvertisingSDK.Node])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Node : Swift.Encodable {
  public init(asi: Swift.String, sid: Swift.String, rid: Swift.String, hp: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct User : Swift.Encodable {
  public init(id: Swift.String, yob: Swift.Int, gender: SAAdvertisingSDK.GenderConstant, ext: SAAdvertisingSDK.UserEXT)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UserEXT : Swift.Encodable {
  public init(consent: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct VastStaticResource : Swift.Codable {
  public let creativeType: Swift.String
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastStaticResource : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastStaticResource, b: SAAdvertisingSDK.VastStaticResource) -> Swift.Bool
}
public struct VastAdParameters : Swift.Codable {
  public let xmlEncoded: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastAdParameters : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastAdParameters, b: SAAdvertisingSDK.VastAdParameters) -> Swift.Bool
}
public enum PricingModel : Swift.String, Swift.Codable {
  case cpc
  case cpm
  case cpe
  case cpv
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastPricing : Swift.Codable {
  public let model: SAAdvertisingSDK.PricingModel
  public let currency: Swift.String
  public var pricing: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastPricing : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastPricing, b: SAAdvertisingSDK.VastPricing) -> Swift.Bool
}
public enum ClickType : Swift.String, Swift.Codable {
  case clickThrough
  case clickTracking
  case customClick
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastVideoClick : Swift.Codable {
  public let id: Swift.String?
  public let type: SAAdvertisingSDK.ClickType
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastVideoClick {
  public init(type: SAAdvertisingSDK.ClickType, attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastVideoClick : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastVideoClick, b: SAAdvertisingSDK.VastVideoClick) -> Swift.Bool
}
public struct VMAPExtension {
}
@_hasMissingDesignatedInitializers public class TechAdvertising {
  public static let tracker: SATrackingSDK.TechTracker
  public static func initialize(storeUrl: Swift.String, apiKey: Swift.String, apiSecret: Swift.String, partnerId: Swift.String, uid: Swift.String, baseUrl: Swift.String, trackingSdkBaseUrl: Swift.String, debugMode: Swift.Bool = false, httpHeaders: [Swift.String : () -> Swift.String]? = nil)
  @objc deinit
}
public func track(url: Foundation.URL, eventName: Swift.String? = nil)
public func track(urls: [Foundation.URL], eventName: Swift.String? = nil)
public struct VastCompanionClickTracking {
  public let id: Swift.String?
}
public struct VastCompanionCreative : Swift.Codable {
  public let width: Swift.Int
  public let height: Swift.Int
  public let id: Swift.String?
  public let assetWidth: Swift.Int?
  public let assetHeight: Swift.Int?
  public let expandedWidth: Swift.Int?
  public let expandedHeight: Swift.Int?
  public let apiFramework: Swift.String?
  public let adSlotId: Swift.String?
  public let pxRatio: Swift.Double?
  public var staticResource: [SAAdvertisingSDK.VastStaticResource]
  public var iFrameResource: [Foundation.URL]
  public var htmlResource: [Foundation.URL]
  public var altText: Swift.String?
  public var companionClickThrough: Foundation.URL?
  public var companionClickTracking: [Foundation.URL]
  public var trackingEvents: [SAAdvertisingSDK.VastTrackingEvent]
  public var adParameters: SAAdvertisingSDK.VastAdParameters?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastCompanionCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastCompanionCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastCompanionCreative, b: SAAdvertisingSDK.VastCompanionCreative) -> Swift.Bool
}
public struct VastSurvey : Swift.Codable {
  public let type: Swift.String?
  public var survey: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastSurvey : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastSurvey, b: SAAdvertisingSDK.VastSurvey) -> Swift.Bool
}
public struct VastNonLinearAdsCreative : Swift.Codable {
  public var trackingEvents: [SAAdvertisingSDK.VastTrackingEvent]
  public var nonLinear: [SAAdvertisingSDK.VastNonLinear]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastNonLinearAdsCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastNonLinearAdsCreative, b: SAAdvertisingSDK.VastNonLinearAdsCreative) -> Swift.Bool
}
public struct VastNonLinear : Swift.Codable {
  public var height: Swift.String
  public var id: Swift.String
  public var width: Swift.String
  public var staticResource: SAAdvertisingSDK.VastStaticResource?
  public var nonLinearClickTracking: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastNonLinear {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastNonLinear : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastNonLinear, b: SAAdvertisingSDK.VastNonLinear) -> Swift.Bool
}
public enum VastErrorCodes : Swift.Int {
  case xmlParsingError
  case vastSchemaValidationError
  case vastVersionOfResponseNotSupported
  case traffickingError
  case videoPlayerExpectingDifferentLinearity
  case videoPlayerExpectingDifferentDuration
  case videoPlayerExpectingDifferentSize
  case adCategoryNotProvided
  case generalWrapperError
  case timeoutOfVastURI
  case wrapperLimitReached
  case noAdsVastResponse
  case inlineResponseFailedToDisplayInTime
  case generalLinearError
  case fileNotFound
  case timeoutOfMediaFile
  case mediaFileNotSupported
  case problemDisplayingMediaFile
  case conditionalAdRejected
  case interactiveUnitInNodeNotExecuted
  case verificationUnitInNodeNotExecuted
  case generalNonLinearAdsError
  case creativeDimensionTooLarge
  case unableToFetchResource
  case nonLinearResourceNotSupported
  case generalCompanionAdsError
  case noAvailableSpace
  case unableToDisplayCompanion
  case unableToFetchCompanionResource
  case companionResourceNotSupported
  case undefinedError
  case generalVPAIDError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class VideoPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAAdvertisingSDK.PlayerViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func loadData(endpoint: Swift.String = "", placementId: Swift.String)
}
public enum CompanionsRequirement : Swift.String, Swift.Codable {
  case all
  case any
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastCompanionAds : Swift.Codable {
  public let required: SAAdvertisingSDK.CompanionsRequirement
  public var companions: [SAAdvertisingSDK.VastCompanionCreative]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastCompanionAds {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastCompanionAds : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastCompanionAds, b: SAAdvertisingSDK.VastCompanionAds) -> Swift.Bool
}
public enum VMAPAdSourceTemplate : Swift.String, Swift.Codable {
  case vast
  case vast1
  case vast2
  case vast3
  case vast4
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdSource : Swift.Codable {
  public let allowMultipleAds: Swift.Bool
  public let followRedirects: Swift.Bool
  public let id: Swift.String
  public var vastAdData: SAAdvertisingSDK.VastModel?
  public var adTagURI: Foundation.URL?
  public var customAdData: Swift.String?
  public var templateType: SAAdvertisingSDK.VMAPAdSourceTemplate?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VMAPAdSource {
  public init(attrDict: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAAdvertisingSDK.BannerViewDelegate?
  @_Concurrency.MainActor(unsafe) public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scaleToFit: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func loadData(bannerModel: SAAdvertisingSDK.BannerModel)
  @objc deinit
}
extension SAAdvertisingSDK.BannerView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension SAAdvertisingSDK.BannerView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public enum TrackingEventType : Swift.String, Swift.Codable {
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  case creativeView
  case start
  case mute
  case unmute
  case pause
  case rewind
  case resume
  case fullscreen
  case exitFullscreen
  case playerExpand
  case playerCollapse
  case acceptInvitationLinear
  case closeLinear
  case skip
  case progress
  case collapse
  case expand
  case acceptInvitation
  case close
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastTrackingEvent : Swift.Codable {
  public let type: SAAdvertisingSDK.TrackingEventType
  public let offset: Swift.Double?
  public var url: Foundation.URL?
  public var tracked: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastTrackingEvent : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastTrackingEvent, b: SAAdvertisingSDK.VastTrackingEvent) -> Swift.Bool
}
public protocol VastTrackerDelegate : AnyObject {
  func adFirstQuartile(vastTracker: SAAdvertisingSDK.VastTracker, ad: SAAdvertisingSDK.VastAd)
  func adMidpoint(vastTracker: SAAdvertisingSDK.VastTracker, ad: SAAdvertisingSDK.VastAd)
  func adThirdQuartile(vastTracker: SAAdvertisingSDK.VastTracker, ad: SAAdvertisingSDK.VastAd)
}
public struct TrackerModel {
}
public class VastTracker {
  weak public var delegate: SAAdvertisingSDK.VastTrackerDelegate?
  final public let vastModel: SAAdvertisingSDK.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  public init(vastModel: SAAdvertisingSDK.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: SAAdvertisingSDK.VastTrackerDelegate? = nil, trackProgressCumulatively: Swift.Bool = true)
  @objc deinit
}
extension SAAdvertisingSDK.VastTracker {
  public func updateProgress(time: Swift.Double) throws
  public func trackAdBreakStart(for adBreak: SAAdvertisingSDK.VMAPAdBreak)
  public func trackAdBreakEnd(for adBreak: SAAdvertisingSDK.VMAPAdBreak)
  public func trackAdBreakEvents(for adBreak: SAAdvertisingSDK.VMAPAdBreak, withURLs urls: [Foundation.URL])
  public func trackAdStart(withId id: Swift.String) throws
  public func trackAdComplete() throws
  public func trackSkippedAds(with ids: [Swift.String])
  public func played() throws
  public func paused() throws
  public func fullscreen(_ val: Swift.Bool) throws
  public func rewind() throws
  public func muted(_ val: Swift.Bool) throws
  public func acceptedLinearInvitation() throws
  public func closed() throws
  public func clicked() throws -> Foundation.URL?
  public func clickedWithCustomAction() throws -> [Foundation.URL]
  public func error(withReason code: SAAdvertisingSDK.VastErrorCodes?) throws
  public func trackViewability(type: SAAdvertisingSDK.VastViewableImpressionType) throws
}
public enum VMAPError : Swift.Error {
  case invalidXMLDocument
  case invalidVMAPDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case internalError
  public static func == (a: SAAdvertisingSDK.VMAPError, b: SAAdvertisingSDK.VMAPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastCreative : Swift.Codable {
  public let id: Swift.String?
  public let adId: Swift.String?
  public let sequence: Swift.Int?
  public let apiFramework: Swift.String?
  public var universalAdId: SAAdvertisingSDK.VastUniversalAdId?
  public var creativeExtensions: [SAAdvertisingSDK.VastCreativeExtension]
  public var linear: SAAdvertisingSDK.VastLinearCreative?
  public var nonLinearAds: SAAdvertisingSDK.VastNonLinearAdsCreative?
  public var companionAds: SAAdvertisingSDK.VastCompanionAds?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastCreative, b: SAAdvertisingSDK.VastCreative) -> Swift.Bool
}
public protocol VastTrackerNonLinearDelegate : AnyObject {
  func adBreakStart(vastTracker: SAAdvertisingSDK.VastTrackerNonLinear)
  func adBreakComplete(vastTracker: SAAdvertisingSDK.VastTrackerNonLinear)
}
public class VastTrackerNonLinear {
  weak public var delegate: SAAdvertisingSDK.VastTrackerNonLinearDelegate?
  final public let id: Swift.String
  final public let vastModel: SAAdvertisingSDK.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  @available(*, message: "do not use VastTracker for storing this model, it is not being used")
  public var vmapModel: SAAdvertisingSDK.VMAPModel?
  public init(id: Swift.String, vastModel: SAAdvertisingSDK.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: SAAdvertisingSDK.VastTrackerNonLinearDelegate? = nil, trackProgressCumulatively: Swift.Bool = true)
  @available(*, message: "Use init(id:,vastModel:) instead")
  convenience public init(id: Swift.String, vmapModel: SAAdvertisingSDK.VMAPModel, breakId: Swift.String, startTime: Swift.Double, supportAdBuffets: Swift.Bool = false, delegate: SAAdvertisingSDK.VastTrackerNonLinearDelegate? = nil) throws
  public func updateProgress(time: Swift.Double) throws
  public func adBreakCompleted() throws
  @objc deinit
}
public struct HashType {
  public static let SHA_1: SAAdvertisingSDK.HashType
  public static let MD5: SAAdvertisingSDK.HashType
}
public struct VastCreativeExtension : Swift.Codable {
  public let mimeType: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastCreativeExtension {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastCreativeExtension : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastCreativeExtension, b: SAAdvertisingSDK.VastCreativeExtension) -> Swift.Bool
}
public struct VastAdSystem : Swift.Codable {
  public let version: Swift.String?
  public var system: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastAdSystem : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastAdSystem, b: SAAdvertisingSDK.VastAdSystem) -> Swift.Bool
}
public enum CloseButtonType {
  case COUNTDOWN
  case APPEARING
  case VISIBLE
  case NONE
  public static func == (a: SAAdvertisingSDK.CloseButtonType, b: SAAdvertisingSDK.CloseButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastIcon : Swift.Codable {
  public let program: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let xPosition: Swift.String
  public let yPosition: Swift.String
  public let duration: Swift.Double
  public let offset: Swift.Double
  public let apiFramework: Swift.String
  public let pxratio: Swift.Double
  public var iconViewTracking: [Foundation.URL]
  public var iconClicks: SAAdvertisingSDK.IconClicks?
  public var staticResource: [SAAdvertisingSDK.VastStaticResource]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastIcon {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastIcon : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastIcon, b: SAAdvertisingSDK.VastIcon) -> Swift.Bool
}
public enum VMAPTrackingEventType : Swift.String, Swift.Codable {
  case breakStart
  case breakEnd
  case error
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPTrackingEvent : Swift.Codable {
  public let event: SAAdvertisingSDK.VMAPTrackingEventType
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VMAPTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
public enum VMAPErrorCodes : Swift.Int {
  case undefined
  case vmapSchemaError
  case vmapResponesVersionNotSupported
  case vmapParsingError
  case adBreakTypeNotSupported
  case generalAdResponseDocumentError
  case adResponseTemplateTypeNotSupported
  case adResponseDocumentExtractionOrParsingError
  case adResponseDocumentRetrievalTimeout
  case adResponseDocumentRetrievalError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VastIconClickTracking : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastIconClickTracking : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastIconClickTracking, b: SAAdvertisingSDK.VastIconClickTracking) -> Swift.Bool
}
public struct VastLinearCreative : Swift.Codable {
  public let skipOffset: Swift.String?
  public var duration: Swift.Double?
  public var adParameters: SAAdvertisingSDK.VastAdParameters?
  public var videoClicks: [SAAdvertisingSDK.VastVideoClick]
  public var trackingEvents: [SAAdvertisingSDK.VastTrackingEvent]
  public var files: SAAdvertisingSDK.VastMediaFiles
  public var icons: [SAAdvertisingSDK.VastIcon]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastLinearCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastLinearCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastLinearCreative, b: SAAdvertisingSDK.VastLinearCreative) -> Swift.Bool
}
public enum VastViewableImpressionType : Swift.String {
  case viewable
  case notViewable
  case viewUndetermined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastViewableImpression : Swift.Codable {
  public let id: Swift.String
  public var url: Foundation.URL?
  public var viewable: [Foundation.URL]
  public var notViewable: [Foundation.URL]
  public var viewUndetermined: [Foundation.URL]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastViewableImpression : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastViewableImpression, b: SAAdvertisingSDK.VastViewableImpression) -> Swift.Bool
}
public struct VastUniversalAdId : Swift.Codable {
  public let idRegistry: Swift.String
  public let idValue: Swift.String
  public var uniqueCreativeId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastUniversalAdId {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDK.VastUniversalAdId : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastUniversalAdId, b: SAAdvertisingSDK.VastUniversalAdId) -> Swift.Bool
}
public struct AudioModel {
  public init(placementId: Swift.String, minduration: Swift.Int = 10, maxduration: Swift.Int = 32, startdelay: SAAdvertisingSDK.StartDelayConstant = StartDelayConstant.PRE_ROLL, maxextended: Swift.Int = 5, maxseq: Swift.Int = 1, pmp: SAAdvertisingSDK.Pmp, bidfloor: Swift.Double = 0, bidfloorcur: Swift.String = "USD", app: SAAdvertisingSDK.App, user: SAAdvertisingSDK.User, cur: [Swift.String], bcat: [Swift.String], badv: [Swift.String], regsEXT: SAAdvertisingSDK.RegsEXT, schain: SAAdvertisingSDK.Schain, customParams: [Swift.String : Swift.String] = [:])
}
public enum RequestType {
  case GET
  case POST
  public static func == (a: SAAdvertisingSDK.RequestType, b: SAAdvertisingSDK.RequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastVerification : Swift.Codable {
  public let vendor: Foundation.URL?
  public var viewableImpression: SAAdvertisingSDK.VastViewableImpression?
  public var javaScriptResource: [SAAdvertisingSDK.VastResource]
  public var flashResources: [SAAdvertisingSDK.VastResource]
  public var verificationParameters: SAAdvertisingSDK.VastAdVerificationParameters?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastVerification : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastVerification, b: SAAdvertisingSDK.VastVerification) -> Swift.Bool
}
public enum StartDelayConstant : Swift.Int, Swift.Encodable {
  case PRE_ROLL
  case MID_ROLL
  case POST_ROLL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VastAdVerificationParameters : Swift.Codable {
  public var data: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VastAdVerificationParameters : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.VastAdVerificationParameters, b: SAAdvertisingSDK.VastAdVerificationParameters) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class RTBAdvertisementRepository {
  public class func shared() -> SAAdvertisingSDK.RTBAdvertisementRepository
  public func getAdvertisement(endpoint: Swift.String = "", audioModel: SAAdvertisingSDK.AudioModel, complete: @escaping (SAAdvertisingSDK.RTBAdvertisingResponse?, Swift.Error?) -> ())
  @objc deinit
}
public enum VMAPAdBreakType : Swift.String, Swift.Codable {
  case linear
  case nonlinear
  case display
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdBreak : Swift.Codable {
  public var breakId: Swift.String?
  public var repeatAfter: Swift.String?
  public let breakType: SAAdvertisingSDK.VMAPAdBreakType
  public let timeOffset: Swift.String
  public var adSource: SAAdvertisingSDK.VMAPAdSource?
  public var trackingEvents: [SAAdvertisingSDK.VMAPTrackingEvent]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.VMAPAdBreak {
  public init(attrDict: [Swift.String : Swift.String])
  public func trackEvent(withType type: SAAdvertisingSDK.VMAPTrackingEventType)
  public func trackEvents(withUrls urls: [Foundation.URL])
}
public enum GenderConstant : Swift.String, Swift.Encodable {
  case MALE
  case FEMALE
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct IconClicks : Swift.Codable {
  public var iconClickThrough: Foundation.URL?
  public var iconClickTracking: [SAAdvertisingSDK.VastIconClickTracking]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SAAdvertisingSDK.IconClicks : Swift.Equatable {
  public static func == (a: SAAdvertisingSDK.IconClicks, b: SAAdvertisingSDK.IconClicks) -> Swift.Bool
}
extension SAAdvertisingSDK.ContextConstant : Swift.Equatable {}
extension SAAdvertisingSDK.ContextConstant : Swift.Hashable {}
extension SAAdvertisingSDK.ContextConstant : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VastError : Swift.Equatable {}
extension SAAdvertisingSDK.VastError : Swift.Hashable {}
extension SAAdvertisingSDK.AdType : Swift.Equatable {}
extension SAAdvertisingSDK.AdType : Swift.Hashable {}
extension SAAdvertisingSDK.AdType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.PricingModel : Swift.Equatable {}
extension SAAdvertisingSDK.PricingModel : Swift.Hashable {}
extension SAAdvertisingSDK.PricingModel : Swift.RawRepresentable {}
extension SAAdvertisingSDK.ClickType : Swift.Equatable {}
extension SAAdvertisingSDK.ClickType : Swift.Hashable {}
extension SAAdvertisingSDK.ClickType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VastErrorCodes : Swift.Equatable {}
extension SAAdvertisingSDK.VastErrorCodes : Swift.Hashable {}
extension SAAdvertisingSDK.VastErrorCodes : Swift.RawRepresentable {}
extension SAAdvertisingSDK.CompanionsRequirement : Swift.Equatable {}
extension SAAdvertisingSDK.CompanionsRequirement : Swift.Hashable {}
extension SAAdvertisingSDK.CompanionsRequirement : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VMAPAdSourceTemplate : Swift.Equatable {}
extension SAAdvertisingSDK.VMAPAdSourceTemplate : Swift.Hashable {}
extension SAAdvertisingSDK.VMAPAdSourceTemplate : Swift.RawRepresentable {}
extension SAAdvertisingSDK.TrackingEventType : Swift.Equatable {}
extension SAAdvertisingSDK.TrackingEventType : Swift.Hashable {}
extension SAAdvertisingSDK.TrackingEventType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VMAPError : Swift.Equatable {}
extension SAAdvertisingSDK.VMAPError : Swift.Hashable {}
extension SAAdvertisingSDK.CloseButtonType : Swift.Equatable {}
extension SAAdvertisingSDK.CloseButtonType : Swift.Hashable {}
extension SAAdvertisingSDK.VMAPTrackingEventType : Swift.Equatable {}
extension SAAdvertisingSDK.VMAPTrackingEventType : Swift.Hashable {}
extension SAAdvertisingSDK.VMAPTrackingEventType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VMAPErrorCodes : Swift.Equatable {}
extension SAAdvertisingSDK.VMAPErrorCodes : Swift.Hashable {}
extension SAAdvertisingSDK.VMAPErrorCodes : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VastViewableImpressionType : Swift.Equatable {}
extension SAAdvertisingSDK.VastViewableImpressionType : Swift.Hashable {}
extension SAAdvertisingSDK.VastViewableImpressionType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.RequestType : Swift.Equatable {}
extension SAAdvertisingSDK.RequestType : Swift.Hashable {}
extension SAAdvertisingSDK.StartDelayConstant : Swift.Equatable {}
extension SAAdvertisingSDK.StartDelayConstant : Swift.Hashable {}
extension SAAdvertisingSDK.StartDelayConstant : Swift.RawRepresentable {}
extension SAAdvertisingSDK.VMAPAdBreakType : Swift.Equatable {}
extension SAAdvertisingSDK.VMAPAdBreakType : Swift.Hashable {}
extension SAAdvertisingSDK.VMAPAdBreakType : Swift.RawRepresentable {}
extension SAAdvertisingSDK.GenderConstant : Swift.Equatable {}
extension SAAdvertisingSDK.GenderConstant : Swift.Hashable {}
extension SAAdvertisingSDK.GenderConstant : Swift.RawRepresentable {}
