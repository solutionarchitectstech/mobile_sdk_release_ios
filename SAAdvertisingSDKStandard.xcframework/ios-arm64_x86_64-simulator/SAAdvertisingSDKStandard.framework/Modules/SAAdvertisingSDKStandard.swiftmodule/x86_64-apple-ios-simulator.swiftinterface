// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SAAdvertisingSDKStandard
import AVFoundation
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import CoreLocation
import CoreTelephony
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Network
@_exported import SAAdvertisingSDKStandard
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct VastAdCategory : Swift.Codable {
  public let authority: Foundation.URL?
  public var category: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastAdCategory : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastAdCategory, b: SAAdvertisingSDKStandard.VastAdCategory) -> Swift.Bool
}
public struct VastClientOptions {
  public let wrapperLimit: Swift.Int
  public let singleWrapperTimeLimit: Foundation.TimeInterval
  public let timeLimit: Foundation.TimeInterval
  public let cachedVMAPModel: SAAdvertisingSDKStandard.VMAPModel?
  public init(wrapperLimit: Swift.Int = 5, singleWrapperTimeLimit: Foundation.TimeInterval = 5, timeLimit: Foundation.TimeInterval = 10, cachedVMAPModel: SAAdvertisingSDKStandard.VMAPModel? = nil)
}
public class VastClient {
  public static var trackingLogOutput: ((Swift.String, [Foundation.URL]) -> ())?
  public init(options: SAAdvertisingSDKStandard.VastClientOptions = VastClientOptions())
  public func parseVast(withContentsOf data: Swift.String, completion: @escaping (SAAdvertisingSDKStandard.VastModel?, (any Swift.Error)?) -> ())
  public func parseVast(withContentsOf url: Foundation.URL, completion: @escaping (SAAdvertisingSDKStandard.VastModel?, (any Swift.Error)?) -> ())
  public func parseVMAP(withContentsOf url: Foundation.URL) throws -> SAAdvertisingSDKStandard.VMAPModel
  @objc deinit
}
public struct VastMediaFiles : Swift.Codable {
  public var mediaFiles: [SAAdvertisingSDKStandard.VastMediaFile]
  public var interactiveCreativeFiles: [SAAdvertisingSDKStandard.VastInteractiveCreativeFile]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastMediaFiles : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastMediaFiles, b: SAAdvertisingSDKStandard.VastMediaFiles) -> Swift.Bool
}
public struct InitConfigCoreEntity {
  public let bannerUrl: Swift.String?
  public let productUrl: Swift.String?
  public init(bannerUrl: Swift.String? = nil, productUrl: Swift.String? = nil)
}
extension Swift.String {
  public var toSeconds: Swift.Double? {
    get
  }
}
public struct VastImpression : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastImpression {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastImpression : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastImpression, b: SAAdvertisingSDKStandard.VastImpression) -> Swift.Bool
}
public struct VastModel : Swift.Codable {
  public let version: Swift.String
  public var ads: [SAAdvertisingSDKStandard.VastAd]
  public var errors: [Foundation.URL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastModel {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastModel : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastModel, b: SAAdvertisingSDKStandard.VastModel) -> Swift.Bool
}
public struct VastWrapper : Swift.Codable {
  public let followAdditionalWrappers: Swift.Bool?
  public let allowMultipleAds: Swift.Bool?
  public let fallbackOnNoAd: Swift.Bool?
  public var adTagUri: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastWrapper : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastWrapper, b: SAAdvertisingSDKStandard.VastWrapper) -> Swift.Bool
}
public struct SizeEntity : Swift.CustomDebugStringConvertible {
  public let width: Swift.Int
  public let height: Swift.Int
  public init(width: Swift.Int, height: Swift.Int)
  public var debugDescription: Swift.String {
    get
  }
}
public struct VastMediaFile : Swift.Codable {
  public let delivery: Swift.String
  public let type: Swift.String
  public let width: Swift.String
  public let height: Swift.String
  public let codec: Swift.String?
  public let id: Swift.String?
  public let bitrate: Swift.Int?
  public let minBitrate: Swift.Int?
  public let maxBitrate: Swift.Int?
  public let scalable: Swift.Bool?
  public let maintainAspectRatio: Swift.Bool?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastMediaFile {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastMediaFile : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastMediaFile, b: SAAdvertisingSDKStandard.VastMediaFile) -> Swift.Bool
}
public struct CreativeQuery {
  public var placementId: Swift.String
  public var sizes: [SAAdvertisingSDKStandard.SizeEntity]
  public var floorPrice: Swift.Double?
  public var currency: Swift.String?
  public var customParams: [Swift.String : Swift.String]
  public init(placementId: Swift.String, sizes: [SAAdvertisingSDKStandard.SizeEntity], floorPrice: Swift.Double? = nil, currency: Swift.String? = nil, customParams: [Swift.String : Swift.String] = [:])
}
public struct VastExtension : Swift.Codable {
  public let type: Swift.String
  public var creativeParameters: [SAAdvertisingSDKStandard.VastCreativeParameter]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastExtension {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastExtension : Swift.Equatable {
  public static func == (lhs: SAAdvertisingSDKStandard.VastExtension, rhs: SAAdvertisingSDKStandard.VastExtension) -> Swift.Bool
}
public struct VastInteractiveCreativeFile : Swift.Codable {
  public let type: Swift.String?
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastInteractiveCreativeFile : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastInteractiveCreativeFile, b: SAAdvertisingSDKStandard.VastInteractiveCreativeFile) -> Swift.Bool
}
public struct VastResource : Swift.Codable {
  public let apiFramework: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastResource : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastResource, b: SAAdvertisingSDKStandard.VastResource) -> Swift.Bool
}
public enum VastError : Swift.Error {
  case invalidXMLDocument
  case invalidVASTDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case wrapperLimitReached
  case singleRequestTimeLimitReached
  case wrapperTimeLimitReached
  case internalError
  public static func == (a: SAAdvertisingSDKStandard.VastError, b: SAAdvertisingSDKStandard.VastError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SAAdvertisingSDKStandard.VastError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VastCreativeParameter : Swift.Codable {
  public var creativeId: Swift.String
  public var name: Swift.String
  public var type: Swift.String
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastCreativeParameter {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastCreativeParameter : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastCreativeParameter, b: SAAdvertisingSDKStandard.VastCreativeParameter) -> Swift.Bool
}
public enum TrackingError : Swift.Error {
  case MissingAdBreak
  case unableToUpdateProgressTrackingComplete
  case unableToUpdateProgress(msg: Swift.String)
  case unableToProvideCreativeClickThroughUrls
  case internalError(msg: Swift.String)
  case unableToSkipAdAtThisTime
  case noAdFound(withId: Swift.String)
}
public struct VMAPModel : Swift.Codable {
  public let version: Swift.String
  public var adBreaks: [SAAdvertisingSDKStandard.VMAPAdBreak]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VMAPModel {
  public init(attrDict: [Swift.String : Swift.String])
}
public enum AdType : Swift.String, Swift.Codable {
  case inline
  case wrapper
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastAd : Swift.Codable {
  public var type: SAAdvertisingSDKStandard.AdType
  public let id: Swift.String
  public let sequence: Swift.Int?
  public let conditionalAd: Swift.Bool?
  public var adSystem: SAAdvertisingSDKStandard.VastAdSystem?
  public var impressions: [SAAdvertisingSDKStandard.VastImpression]
  public var adVerifications: [SAAdvertisingSDKStandard.VastVerification]
  public var viewableImpression: SAAdvertisingSDKStandard.VastViewableImpression?
  public var pricing: SAAdvertisingSDKStandard.VastPricing?
  public var errors: [Foundation.URL]
  public var creatives: [SAAdvertisingSDKStandard.VastCreative]
  public var extensions: [SAAdvertisingSDKStandard.VastExtension]
  public var adTitle: Swift.String?
  public var adCategories: [SAAdvertisingSDKStandard.VastAdCategory]
  public var description: Swift.String?
  public var advertiser: Swift.String?
  public var surveys: [SAAdvertisingSDKStandard.VastSurvey]
  public var wrapper: SAAdvertisingSDKStandard.VastWrapper?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastAd {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastAd : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastAd, b: SAAdvertisingSDKStandard.VastAd) -> Swift.Bool
}
public struct ProductCreativeTrackingEntity {
  public var impression: [Swift.String]
  public var click: [Swift.String]
  public var view: [Swift.String]
}
public struct VastStaticResource : Swift.Codable {
  public let creativeType: Swift.String
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastStaticResource : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastStaticResource, b: SAAdvertisingSDKStandard.VastStaticResource) -> Swift.Bool
}
@objc public protocol CreativeDelegate {
  @objc optional func onLoadDataSuccess(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @objc optional func onLoadDataFail(creativeView: SAAdvertisingSDKStandard.CreativeView, error: any Swift.Error)
  @objc optional func onLoadContentSuccess(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @objc optional func onLoadContentFail(creativeView: SAAdvertisingSDKStandard.CreativeView, error: any Swift.Error)
  @objc optional func onNoAdContent(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @objc optional func onClose(creativeView: SAAdvertisingSDKStandard.CreativeView)
}
public class Creative {
  weak public var delegate: (any SAAdvertisingSDKStandard.CreativeDelegate)?
  convenience public init(creativeView: SAAdvertisingSDKStandard.CreativeView)
  public init(creativeViews: [SAAdvertisingSDKStandard.CreativeView])
  public func load(path: Swift.String = "")
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CreativeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var query: SAAdvertisingSDKStandard.CreativeQuery?
  @_Concurrency.MainActor(unsafe) public var scaleToFit: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ layer: QuartzCore.CALayer, in ctx: CoreGraphics.CGContext)
  @objc deinit
}
public struct ProductCreativeEntity {
  public let requestId: Swift.String
  public let placementId: Swift.String
  public var sku: Swift.String
  public var disclaimer: Swift.String?
  public var externalId: Swift.String
  public var tracking: SAAdvertisingSDKStandard.ProductCreativeTrackingEntity?
  public var advertiser: Swift.String?
}
public struct VastAdParameters : Swift.Codable {
  public let xmlEncoded: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastAdParameters : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastAdParameters, b: SAAdvertisingSDKStandard.VastAdParameters) -> Swift.Bool
}
public enum PricingModel : Swift.String, Swift.Codable {
  case cpc
  case cpm
  case cpe
  case cpv
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastPricing : Swift.Codable {
  public let model: SAAdvertisingSDKStandard.PricingModel
  public let currency: Swift.String
  public var pricing: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastPricing : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastPricing, b: SAAdvertisingSDKStandard.VastPricing) -> Swift.Bool
}
public enum ClickType : Swift.String, Swift.Codable {
  case clickThrough
  case clickTracking
  case customClick
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastVideoClick : Swift.Codable {
  public let id: Swift.String?
  public let type: SAAdvertisingSDKStandard.ClickType
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastVideoClick {
  public init(type: SAAdvertisingSDKStandard.ClickType, attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastVideoClick : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastVideoClick, b: SAAdvertisingSDKStandard.VastVideoClick) -> Swift.Bool
}
public protocol ProductCreativeDelegate : AnyObject {
  func onLoadDataSuccess()
  func onLoadDataFail(error: any Swift.Error)
  func onLoadContentSuccess(entity: SAAdvertisingSDKStandard.ProductCreativeEntity)
  func onLoadContentFail(query: SAAdvertisingSDKStandard.ProductCreativeQuery, error: any Swift.Error)
  func onNoAdContent(query: SAAdvertisingSDKStandard.ProductCreativeQuery)
}
public class ProductCreative {
  weak public var delegate: (any SAAdvertisingSDKStandard.ProductCreativeDelegate)?
  convenience public init(query: SAAdvertisingSDKStandard.ProductCreativeQuery)
  public init(queries: [SAAdvertisingSDKStandard.ProductCreativeQuery])
  public func load(path: Swift.String = "")
  @objc deinit
}
public struct VMAPExtension {
}
public struct TechAdvertisingOptions : SAAdvertisingSDKStandard.BaseSdkOptions {
  public var sessionId: Swift.String
  public var storeUrl: Swift.String
  public var initConfig: SAAdvertisingSDKStandard.InitConfig?
  public var remoteConfigUrl: Swift.String?
  public var debugMode: Swift.Bool
  public var httpHeaders: [Swift.String : Swift.String]
  public init(sessionId: Swift.String, storeUrl: Swift.String, initConfig: SAAdvertisingSDKStandard.InitConfig? = nil, remoteConfigUrl: Swift.String? = nil, debugMode: Swift.Bool = false, httpHeaders: [Swift.String : Swift.String] = [:])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TechAdvertising : SAAdvertisingSDKStandard.BaseTechAdvertising<SAAdvertisingSDKStandard.TechAdvertisingOptions> {
  public static let shared: SAAdvertisingSDKStandard.TechAdvertising
  public var uid: Swift.String?
  public static func initialize(options: SAAdvertisingSDKStandard.TechAdvertisingOptions)
  @objc deinit
}
public struct VastCompanionClickTracking {
  public let id: Swift.String?
}
public struct VastCompanionCreative : Swift.Codable {
  public let width: Swift.Int
  public let height: Swift.Int
  public let id: Swift.String?
  public let assetWidth: Swift.Int?
  public let assetHeight: Swift.Int?
  public let expandedWidth: Swift.Int?
  public let expandedHeight: Swift.Int?
  public let apiFramework: Swift.String?
  public let adSlotId: Swift.String?
  public let pxRatio: Swift.Double?
  public var staticResource: [SAAdvertisingSDKStandard.VastStaticResource]
  public var iFrameResource: [Foundation.URL]
  public var htmlResource: [Foundation.URL]
  public var altText: Swift.String?
  public var companionClickThrough: Foundation.URL?
  public var companionClickTracking: [Foundation.URL]
  public var trackingEvents: [SAAdvertisingSDKStandard.VastTrackingEvent]
  public var adParameters: SAAdvertisingSDKStandard.VastAdParameters?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastCompanionCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastCompanionCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastCompanionCreative, b: SAAdvertisingSDKStandard.VastCompanionCreative) -> Swift.Bool
}
public struct VastSurvey : Swift.Codable {
  public let type: Swift.String?
  public var survey: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastSurvey : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastSurvey, b: SAAdvertisingSDKStandard.VastSurvey) -> Swift.Bool
}
public struct VastNonLinearAdsCreative : Swift.Codable {
  public var trackingEvents: [SAAdvertisingSDKStandard.VastTrackingEvent]
  public var nonLinear: [SAAdvertisingSDKStandard.VastNonLinear]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastNonLinearAdsCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastNonLinearAdsCreative, b: SAAdvertisingSDKStandard.VastNonLinearAdsCreative) -> Swift.Bool
}
public struct VastNonLinear : Swift.Codable {
  public var height: Swift.String
  public var id: Swift.String
  public var width: Swift.String
  public var staticResource: SAAdvertisingSDKStandard.VastStaticResource?
  public var nonLinearClickTracking: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastNonLinear {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastNonLinear : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastNonLinear, b: SAAdvertisingSDKStandard.VastNonLinear) -> Swift.Bool
}
public enum VastErrorCodes : Swift.Int {
  case xmlParsingError
  case vastSchemaValidationError
  case vastVersionOfResponseNotSupported
  case traffickingError
  case videoPlayerExpectingDifferentLinearity
  case videoPlayerExpectingDifferentDuration
  case videoPlayerExpectingDifferentSize
  case adCategoryNotProvided
  case generalWrapperError
  case timeoutOfVastURI
  case wrapperLimitReached
  case noAdsVastResponse
  case inlineResponseFailedToDisplayInTime
  case generalLinearError
  case fileNotFound
  case timeoutOfMediaFile
  case mediaFileNotSupported
  case problemDisplayingMediaFile
  case conditionalAdRejected
  case interactiveUnitInNodeNotExecuted
  case verificationUnitInNodeNotExecuted
  case generalNonLinearAdsError
  case creativeDimensionTooLarge
  case unableToFetchResource
  case nonLinearResourceNotSupported
  case generalCompanionAdsError
  case noAvailableSpace
  case unableToDisplayCompanion
  case unableToFetchCompanionResource
  case companionResourceNotSupported
  case undefinedError
  case generalVPAIDError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CompanionsRequirement : Swift.String, Swift.Codable {
  case all
  case any
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastCompanionAds : Swift.Codable {
  public let required: SAAdvertisingSDKStandard.CompanionsRequirement
  public var companions: [SAAdvertisingSDKStandard.VastCompanionCreative]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastCompanionAds {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastCompanionAds : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastCompanionAds, b: SAAdvertisingSDKStandard.VastCompanionAds) -> Swift.Bool
}
public enum VMAPAdSourceTemplate : Swift.String, Swift.Codable {
  case vast
  case vast1
  case vast2
  case vast3
  case vast4
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdSource : Swift.Codable {
  public let allowMultipleAds: Swift.Bool
  public let followRedirects: Swift.Bool
  public let id: Swift.String
  public var vastAdData: SAAdvertisingSDKStandard.VastModel?
  public var adTagURI: Foundation.URL?
  public var customAdData: Swift.String?
  public var templateType: SAAdvertisingSDKStandard.VMAPAdSourceTemplate?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VMAPAdSource {
  public init(attrDict: [Swift.String : Swift.String])
}
public enum TrackingEventType : Swift.String, Swift.Codable {
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  case creativeView
  case start
  case mute
  case unmute
  case pause
  case rewind
  case resume
  case fullscreen
  case exitFullscreen
  case playerExpand
  case playerCollapse
  case acceptInvitationLinear
  case closeLinear
  case skip
  case progress
  case collapse
  case expand
  case acceptInvitation
  case close
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastTrackingEvent : Swift.Codable {
  public let type: SAAdvertisingSDKStandard.TrackingEventType
  public let offset: Swift.Double?
  public var url: Foundation.URL?
  public var tracked: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastTrackingEvent : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastTrackingEvent, b: SAAdvertisingSDKStandard.VastTrackingEvent) -> Swift.Bool
}
public protocol VastTrackerDelegate : AnyObject {
  func adFirstQuartile(vastTracker: SAAdvertisingSDKStandard.VastTracker, ad: SAAdvertisingSDKStandard.VastAd)
  func adMidpoint(vastTracker: SAAdvertisingSDKStandard.VastTracker, ad: SAAdvertisingSDKStandard.VastAd)
  func adThirdQuartile(vastTracker: SAAdvertisingSDKStandard.VastTracker, ad: SAAdvertisingSDKStandard.VastAd)
}
public struct TrackerModel {
}
public class VastTracker {
  weak public var delegate: (any SAAdvertisingSDKStandard.VastTrackerDelegate)?
  final public let vastModel: SAAdvertisingSDKStandard.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  public init(vastModel: SAAdvertisingSDKStandard.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: (any SAAdvertisingSDKStandard.VastTrackerDelegate)? = nil, trackProgressCumulatively: Swift.Bool = true)
  @objc deinit
}
extension SAAdvertisingSDKStandard.VastTracker {
  public func updateProgress(time: Swift.Double) throws
  public func trackAdBreakStart(for adBreak: SAAdvertisingSDKStandard.VMAPAdBreak)
  public func trackAdBreakEnd(for adBreak: SAAdvertisingSDKStandard.VMAPAdBreak)
  public func trackAdBreakEvents(for adBreak: SAAdvertisingSDKStandard.VMAPAdBreak, withURLs urls: [Foundation.URL])
  public func trackAdStart(withId id: Swift.String) throws
  public func trackAdComplete() throws
  public func trackSkippedAds(with ids: [Swift.String])
  public func played() throws
  public func paused() throws
  public func fullscreen(_ val: Swift.Bool) throws
  public func rewind() throws
  public func muted(_ val: Swift.Bool) throws
  public func acceptedLinearInvitation() throws
  public func closed() throws
  public func clicked() throws -> Foundation.URL?
  public func clickedWithCustomAction() throws -> [Foundation.URL]
  public func error(withReason code: SAAdvertisingSDKStandard.VastErrorCodes?) throws
  public func trackViewability(type: SAAdvertisingSDKStandard.VastViewableImpressionType) throws
}
public enum VMAPError : Swift.Error {
  case invalidXMLDocument
  case invalidVMAPDocument
  case unableToParseDocument
  case unableToCreateXMLParser
  case internalError
  public static func == (a: SAAdvertisingSDKStandard.VMAPError, b: SAAdvertisingSDKStandard.VMAPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VastCreative : Swift.Codable {
  public let id: Swift.String?
  public let adId: Swift.String?
  public let sequence: Swift.Int?
  public let apiFramework: Swift.String?
  public var universalAdId: SAAdvertisingSDKStandard.VastUniversalAdId?
  public var creativeExtensions: [SAAdvertisingSDKStandard.VastCreativeExtension]
  public var linear: SAAdvertisingSDKStandard.VastLinearCreative?
  public var nonLinearAds: SAAdvertisingSDKStandard.VastNonLinearAdsCreative?
  public var companionAds: SAAdvertisingSDKStandard.VastCompanionAds?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastCreative, b: SAAdvertisingSDKStandard.VastCreative) -> Swift.Bool
}
public protocol VastTrackerNonLinearDelegate : AnyObject {
  func adBreakStart(vastTracker: SAAdvertisingSDKStandard.VastTrackerNonLinear)
  func adBreakComplete(vastTracker: SAAdvertisingSDKStandard.VastTrackerNonLinear)
}
public class VastTrackerNonLinear {
  weak public var delegate: (any SAAdvertisingSDKStandard.VastTrackerNonLinearDelegate)?
  final public let id: Swift.String
  final public let vastModel: SAAdvertisingSDKStandard.VastModel
  final public let totalAds: Swift.Int
  final public let startTime: Swift.Double
  @available(*, message: "do not use VastTracker for storing this model, it is not being used")
  public var vmapModel: SAAdvertisingSDKStandard.VMAPModel?
  public init(id: Swift.String, vastModel: SAAdvertisingSDKStandard.VastModel, startTime: Swift.Double = 0.0, supportAdBuffets: Swift.Bool = false, delegate: (any SAAdvertisingSDKStandard.VastTrackerNonLinearDelegate)? = nil, trackProgressCumulatively: Swift.Bool = true)
  @available(*, message: "Use init(id:,vastModel:) instead")
  convenience public init(id: Swift.String, vmapModel: SAAdvertisingSDKStandard.VMAPModel, breakId: Swift.String, startTime: Swift.Double, supportAdBuffets: Swift.Bool = false, delegate: (any SAAdvertisingSDKStandard.VastTrackerNonLinearDelegate)? = nil) throws
  public func updateProgress(time: Swift.Double) throws
  public func adBreakCompleted() throws
  @objc deinit
}
public protocol BaseSdkOptions {
  var sessionId: Swift.String { get set }
  var storeUrl: Swift.String { get set }
  var initConfig: SAAdvertisingSDKStandard.InitConfig? { get set }
  var remoteConfigUrl: Swift.String? { get set }
  var debugMode: Swift.Bool { get set }
  var httpHeaders: [Swift.String : Swift.String] { get set }
}
public struct ProductCreativeQuery {
  public var placementId: Swift.String
  public var customParams: [Swift.String : Swift.String]
  public init(placementId: Swift.String, customParams: [Swift.String : Swift.String] = [:])
}
extension Network.NWInterface.InterfaceType : Swift.CaseIterable {
  public static var allCases: [Network.NWInterface.InterfaceType]
  public typealias AllCases = [Network.NWInterface.InterfaceType]
}
public struct VastCreativeExtension : Swift.Codable {
  public let mimeType: Swift.String?
  public var content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastCreativeExtension {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastCreativeExtension : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastCreativeExtension, b: SAAdvertisingSDKStandard.VastCreativeExtension) -> Swift.Bool
}
public struct VastAdSystem : Swift.Codable {
  public let version: Swift.String?
  public var system: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastAdSystem : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastAdSystem, b: SAAdvertisingSDKStandard.VastAdSystem) -> Swift.Bool
}
public struct VastIcon : Swift.Codable {
  public let program: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let xPosition: Swift.String
  public let yPosition: Swift.String
  public let duration: Swift.Double
  public let offset: Swift.Double
  public let apiFramework: Swift.String
  public let pxratio: Swift.Double
  public var iconViewTracking: [Foundation.URL]
  public var iconClicks: SAAdvertisingSDKStandard.IconClicks?
  public var staticResource: [SAAdvertisingSDKStandard.VastStaticResource]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastIcon {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastIcon : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastIcon, b: SAAdvertisingSDKStandard.VastIcon) -> Swift.Bool
}
public enum VMAPTrackingEventType : Swift.String, Swift.Codable {
  case breakStart
  case breakEnd
  case error
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPTrackingEvent : Swift.Codable {
  public let event: SAAdvertisingSDKStandard.VMAPTrackingEventType
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VMAPTrackingEvent {
  public init(attrDict: [Swift.String : Swift.String])
}
extension Swift.String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ApiError : Swift.Error, Swift.CustomStringConvertible, Foundation.LocalizedError {
  case networkFailed(error: any Swift.Error)
  case invocationFailed(reason: (message: Swift.String, statusCode: Swift.Int))
  case failed(error: any Swift.Error)
  case noContent
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VMAPErrorCodes : Swift.Int {
  case undefined
  case vmapSchemaError
  case vmapResponesVersionNotSupported
  case vmapParsingError
  case adBreakTypeNotSupported
  case generalAdResponseDocumentError
  case adResponseTemplateTypeNotSupported
  case adResponseDocumentExtractionOrParsingError
  case adResponseDocumentRetrievalTimeout
  case adResponseDocumentRetrievalError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VastIconClickTracking : Swift.Codable {
  public let id: Swift.String?
  public var url: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastIconClickTracking : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastIconClickTracking, b: SAAdvertisingSDKStandard.VastIconClickTracking) -> Swift.Bool
}
public struct VastLinearCreative : Swift.Codable {
  public let skipOffset: Swift.String?
  public var duration: Swift.Double?
  public var adParameters: SAAdvertisingSDKStandard.VastAdParameters?
  public var videoClicks: [SAAdvertisingSDKStandard.VastVideoClick]
  public var trackingEvents: [SAAdvertisingSDKStandard.VastTrackingEvent]
  public var files: SAAdvertisingSDKStandard.VastMediaFiles
  public var icons: [SAAdvertisingSDKStandard.VastIcon]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastLinearCreative {
  public init(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastLinearCreative : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastLinearCreative, b: SAAdvertisingSDKStandard.VastLinearCreative) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class BaseTechAdvertising<SDK_OPTIONS> : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate where SDK_OPTIONS : SAAdvertisingSDKStandard.BaseSdkOptions {
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
public enum VastViewableImpressionType : Swift.String {
  case viewable
  case notViewable
  case viewUndetermined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VastViewableImpression : Swift.Codable {
  public let id: Swift.String
  public var url: Foundation.URL?
  public var viewable: [Foundation.URL]
  public var notViewable: [Foundation.URL]
  public var viewUndetermined: [Foundation.URL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastViewableImpression : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastViewableImpression, b: SAAdvertisingSDKStandard.VastViewableImpression) -> Swift.Bool
}
public struct VastUniversalAdId : Swift.Codable {
  public let idRegistry: Swift.String
  public let idValue: Swift.String
  public var uniqueCreativeId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastUniversalAdId {
  public init?(attrDict: [Swift.String : Swift.String])
}
extension SAAdvertisingSDKStandard.VastUniversalAdId : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastUniversalAdId, b: SAAdvertisingSDKStandard.VastUniversalAdId) -> Swift.Bool
}
public struct VastVerification : Swift.Codable {
  public let vendor: Foundation.URL?
  public var viewableImpression: SAAdvertisingSDKStandard.VastViewableImpression?
  public var javaScriptResource: [SAAdvertisingSDKStandard.VastResource]
  public var flashResources: [SAAdvertisingSDKStandard.VastResource]
  public var verificationParameters: SAAdvertisingSDKStandard.VastAdVerificationParameters?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastVerification : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastVerification, b: SAAdvertisingSDKStandard.VastVerification) -> Swift.Bool
}
public struct VastAdVerificationParameters : Swift.Codable {
  public var data: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VastAdVerificationParameters : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.VastAdVerificationParameters, b: SAAdvertisingSDKStandard.VastAdVerificationParameters) -> Swift.Bool
}
public enum VMAPAdBreakType : Swift.String, Swift.Codable {
  case linear
  case nonlinear
  case display
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VMAPAdBreak : Swift.Codable {
  public var breakId: Swift.String?
  public var repeatAfter: Swift.String?
  public let breakType: SAAdvertisingSDKStandard.VMAPAdBreakType
  public let timeOffset: Swift.String
  public var adSource: SAAdvertisingSDKStandard.VMAPAdSource?
  public var trackingEvents: [SAAdvertisingSDKStandard.VMAPTrackingEvent]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.VMAPAdBreak {
  public init(attrDict: [Swift.String : Swift.String])
  public func trackEvent(withType type: SAAdvertisingSDKStandard.VMAPTrackingEventType)
  public func trackEvents(withUrls urls: [Foundation.URL])
}
@objc @_Concurrency.MainActor(unsafe) public class FullscreenCreativeViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var query: SAAdvertisingSDKStandard.CreativeQuery?
  @_Concurrency.MainActor(unsafe) public var path: Swift.String
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SAAdvertisingSDKStandard.CreativeDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var view: UIKit.UIView! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var creativeView: SAAdvertisingSDKStandard.CreativeView? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension SAAdvertisingSDKStandard.FullscreenCreativeViewController : SAAdvertisingSDKStandard.CreativeDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onNoAdContent(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onLoadDataSuccess(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onLoadDataFail(creativeView: SAAdvertisingSDKStandard.CreativeView, error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onLoadContentSuccess(creativeView: SAAdvertisingSDKStandard.CreativeView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onLoadContentFail(creativeView: SAAdvertisingSDKStandard.CreativeView, error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onClose(creativeView: SAAdvertisingSDKStandard.CreativeView)
}
public struct InitConfig {
  public let core: SAAdvertisingSDKStandard.InitConfigCoreEntity?
  public init(core: SAAdvertisingSDKStandard.InitConfigCoreEntity? = nil)
}
public struct IconClicks : Swift.Codable {
  public var iconClickThrough: Foundation.URL?
  public var iconClickTracking: [SAAdvertisingSDKStandard.VastIconClickTracking]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SAAdvertisingSDKStandard.IconClicks : Swift.Equatable {
  public static func == (a: SAAdvertisingSDKStandard.IconClicks, b: SAAdvertisingSDKStandard.IconClicks) -> Swift.Bool
}
extension SAAdvertisingSDKStandard.VastError : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VastError : Swift.Hashable {}
extension SAAdvertisingSDKStandard.AdType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.AdType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.AdType : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.PricingModel : Swift.Equatable {}
extension SAAdvertisingSDKStandard.PricingModel : Swift.Hashable {}
extension SAAdvertisingSDKStandard.PricingModel : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.ClickType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.ClickType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.ClickType : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VastErrorCodes : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VastErrorCodes : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VastErrorCodes : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.CompanionsRequirement : Swift.Equatable {}
extension SAAdvertisingSDKStandard.CompanionsRequirement : Swift.Hashable {}
extension SAAdvertisingSDKStandard.CompanionsRequirement : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VMAPAdSourceTemplate : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VMAPAdSourceTemplate : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VMAPAdSourceTemplate : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.TrackingEventType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.TrackingEventType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.TrackingEventType : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VMAPError : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VMAPError : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VMAPTrackingEventType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VMAPTrackingEventType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VMAPTrackingEventType : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VMAPErrorCodes : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VMAPErrorCodes : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VMAPErrorCodes : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VastViewableImpressionType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VastViewableImpressionType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VastViewableImpressionType : Swift.RawRepresentable {}
extension SAAdvertisingSDKStandard.VMAPAdBreakType : Swift.Equatable {}
extension SAAdvertisingSDKStandard.VMAPAdBreakType : Swift.Hashable {}
extension SAAdvertisingSDKStandard.VMAPAdBreakType : Swift.RawRepresentable {}
